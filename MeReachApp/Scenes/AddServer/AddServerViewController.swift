//
//  AddServerViewController.swift
//  MeReachApp
//
//  Created by Marina Miranda Aranha on 17/09/20.
//  Copyright (c) 2020. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddServerDisplayLogic: class {
    func displayAddedServer(viewModel: AddServer.AddServer.ViewModel)
}

class AddServerViewController: UITableViewController, AddServerDisplayLogic, UIPickerViewDataSource, UIPickerViewDelegate {
    var interactor: AddServerBusinessLogic?
    var router: (NSObjectProtocol & AddServerRoutingLogic & AddServerDataPassing)?

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = AddServerInteractor()
        let presenter = AddServerPresenter()
        let router = AddServerRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
    // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle
  
    override func viewDidLoad() {
        super.viewDidLoad()
        configurePicker()
    }
    
    func configurePicker() {
        statusTextField.inputView = statusPickerView
    }
    
   // MARK: PickerView
    
    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
    
    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return interactor?.statusTypes.count ?? 0
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return interactor?.statusTypes[row]
    }
    
    func pickerView(_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
        statusTextField.text = interactor?.statusTypes[row]
    }

  
  // MARK: TextFields

    @IBOutlet var textFields: [UITextField]!
    
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
      textField.resignFirstResponder()
      if let index = textFields.firstIndex(of: textField) {
        if index < textFields.count - 1 {
          let nextTextField = textFields[index + 1]
          nextTextField.becomeFirstResponder()
        }
      }
      return true
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)
    {
      if let cell = tableView.cellForRow(at: indexPath) {
        for textField in textFields {
          if textField.isDescendant(of: cell) {
            textField.becomeFirstResponder()
          }
        }
      }
    }
    
    @IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var urlTextField: UITextField!
    @IBOutlet weak var statusTextField: UITextField!
    @IBOutlet var statusPickerView: UIPickerView!
    
    @IBAction func saveButtonTapped(_ sender: Any) {
        
        let name = nameTextField.text!
        let url = urlTextField.text!
        let status = statusTextField.text!
        
        let request = AddServer.AddServer.Request(serverFormFields: AddServer.ServerFormFields(name: name,
                                                                                               url: url,
                                                                                               status: status))
        interactor?.addServer(request: request)
        
    }
    
    func displayAddedServer(viewModel: AddServer.AddServer.ViewModel)
    {
      if viewModel.server != nil {
        router?.routeToListServers(segue: nil)
      } else {
        showServerFailureAlert(title: "Failed to add server", message: "Please correct your server information and submit again.")
      }
    }
    
    // MARK: Error handling
    
    private func showServerFailureAlert(title: String, message: String)
    {
      let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)
      let alertAction = UIAlertAction(title: "OK", style: .default, handler: nil)
      alertController.addAction(alertAction)
      showDetailViewController(alertController, sender: nil)
    }
    
}
