//
//  ListServersViewController.swift
//  MeReachApp
//
//  Created by Marina Miranda Aranha on 15/09/20.
//  Copyright (c) 2020. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListServersDisplayLogic: class {
    func displayFetchedServers(viewModel: ListServers.FetchServers.ViewModel)
}

class ListServersViewController: UITableViewController, ListServersDisplayLogic {

    var interactor: ListServersBusinessLogic?
    var router: (NSObjectProtocol & ListServersRoutingLogic & ListServersDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
  
  // MARK: Setup
  
    private func setup() {
        let viewController = self
        let interactor = ListServersInteractor()
        let presenter = ListServersPresenter()
        let router = ListServersRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
   // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
          let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
          if let router = router, router.responds(to: selector) {
            router.perform(selector, with: segue)
          }
        }
    }
  
   // MARK: View lifecycle
    let defaults = UserDefaults.standard
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchServers()
        
        if defaults.bool(forKey: "First Launch") == true{
            
            defaults.setValue(true, forKey: "First Launch")
        } else {
            //add preloaded data on first launch
            addPreloadedData()
            defaults.setValue(true, forKey: "First Launch")
        }
        

    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        fetchServers()

    }

    // MARK: Display servers

    var displayedServers: [ListServers.FetchServers.ViewModel.DisplayedServer] = []

    func fetchServers(){
        let request = ListServers.FetchServers.Request()
        interactor?.fetchServers(request: request)
    }

    func displayFetchedServers(viewModel: ListServers.FetchServers.ViewModel) {
        displayedServers = viewModel.displayedServers
        
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }

    // MARK: - Table view data source

    override func numberOfSections(in tableView: UITableView) -> Int
    {
        return 1
    }

    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
    {
        return displayedServers.count
    }

    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
    {
        let displayedServer = displayedServers[indexPath.row]
        var cell = tableView.dequeueReusableCell(withIdentifier: "TableViewCell")
        if cell == nil {
          cell = UITableViewCell(style: .value1, reuseIdentifier: "TableViewCell")
        }

        cell?.textLabel?.text = displayedServer.name
        cell?.detailTextLabel?.text = displayedServer.status

        return cell!
    }
    
    override func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        
        let action = UIContextualAction(style: .destructive, title: "Delete") { [self] (action, view, completionHandler) in
            let serverToRemove = self.displayedServers[indexPath.row]

            let request = ListServers.DeleteServer.Request(serverFormFields: ListServers.ServerFormFields(name: serverToRemove.name, status: serverToRemove.status, url: serverToRemove.url))

            interactor?.deleteServer(request: request)

            self.fetchServers()

        }
        
        return UISwipeActionsConfiguration(actions: [action])
    }
    
    
    func addPreloadedData(){
        let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext
        let obj = ManagedServer(context: context)
        obj.name = "Google"
        obj.status = "online"
        obj.url = "google.com"
        do{
            try context.save()
        }
        catch{
            
        }
    }

}
